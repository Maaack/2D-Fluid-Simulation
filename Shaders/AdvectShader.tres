[gd_resource type="Shader" format=2]

[resource]
code = "/* 
This shader is under MIT license.
*/

shader_type canvas_item;

uniform highp sampler2D velocity;
uniform highp float deltaTime;

vec4 getTransparentForBlack(vec4 color) {
	return color == vec4(0.0, 0.0, 0.0, 1.0) ? vec4(color.rgb, 0.0) : color;
}

vec4 bilerp(sampler2D sampler, vec2 uv, vec2 texelSize) {
	vec2 st = uv / texelSize - 0.5; // Not sure about the - 0.5
	vec2 uvInt = floor(st);
	vec2 uvFrac = fract(st);

	vec4 a = texture(sampler, (uvInt + vec2(0.5, 0.5)) * texelSize);
	vec4 b = texture(sampler, (uvInt + vec2(1.5, 0.5)) * texelSize);
	vec4 c = texture(sampler, (uvInt + vec2(0.5, 1.5)) * texelSize);
	vec4 d = texture(sampler, (uvInt + vec2(1.5, 1.5)) * texelSize);
	a = getTransparentForBlack(a);
	b = getTransparentForBlack(b);
	c = getTransparentForBlack(c);
	d = getTransparentForBlack(d);
	return mix(mix(a, b, uvFrac.x), mix(c, d, uvFrac.x), uvFrac.y);
}

void fragment()
{
	vec2 coord = UV.xy - deltaTime * bilerp(velocity, UV.xy, TEXTURE_PIXEL_SIZE).xy;
	COLOR = bilerp(TEXTURE, coord, TEXTURE_PIXEL_SIZE);
}"
