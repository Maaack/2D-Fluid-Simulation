[gd_resource type="Shader" format=2]

[resource]
code = "/* 
This shader is under MIT license.
*/

shader_type canvas_item;

uniform float viscosity;
uniform highp float deltaTime;

vec2 jacobi(sampler2D x, sampler2D b, float alpha, float beta, vec2 uv, vec2 texelSize)
{
	vec2 xOffset = vec2(texelSize.x, 0.0);
	vec2 yOffset = vec2(0.0, texelSize.y);


	vec2 xl = texture(x, uv - xOffset).xy;
	vec2 xr = texture(x, uv + xOffset).xy;
	vec2 xb = texture(x, uv - yOffset).xy;
	vec2 xt = texture(x, uv + yOffset).xy;

	vec2 bc = texture(b, uv).xy;

	return vec2((xl + xr + xb + xt + alpha * bc) / beta);
}

void fragment()
{
	vec2 velocity;
	vec2 size = 1.0 / TEXTURE_PIXEL_SIZE;
	if (viscosity != 0.0){
		float alpha = (size.x * size.x) / (viscosity * deltaTime);
		float beta = alpha + 4.0;
		velocity = jacobi(TEXTURE, TEXTURE, alpha, beta, UV, TEXTURE_PIXEL_SIZE);
		COLOR = vec4(velocity, 0.0, 1.0);
	}
}
"
