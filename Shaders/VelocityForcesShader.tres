[gd_resource type="Shader" format=2]

[resource]
code = "/* 
This shader is under MIT license.
*/

shader_type canvas_item;

uniform float vorticity;
uniform highp float deltaTime;

float curl (sampler2D velocity, vec2 uv, vec2 texelSize) {
	vec2 xOffset = vec2(texelSize.x, 0.0);
	vec2 yOffset = vec2(0.0, texelSize.y);
	
	float velocityTop = texture(velocity, uv + yOffset).x;
	float velocityBottom = texture(velocity, uv - yOffset).x;
	float velocityRight = texture(velocity, uv + xOffset).y;
	float velocityLeft = texture(velocity, uv - xOffset).y;
	return velocityTop - velocityBottom + velocityLeft - velocityRight;
}

vec2 vorticityForce (sampler2D velocity, vec2 uv, vec2 texelSize) {
	vec2 xOffset = vec2(texelSize.x, 0.0);
	vec2 yOffset = vec2(0.0, texelSize.y);
	
	float curlTop = texture(velocity, uv + yOffset).x;
	float curlBottom = texture(velocity, uv - yOffset).x;
	float curlRight = texture(velocity, uv + xOffset).y;
	float curlLeft = texture(velocity, uv - xOffset).y;
	float curlCenter = curl(velocity, uv, texelSize);
	
	vec2 force = vec2(abs(curlTop) - abs(curlBottom), abs(curlLeft) - abs(curlRight));
	force /= (length(force) + 1e-5);
 	force *= vorticity * curlCenter;
	vec2 velocityForce = texture(velocity, uv).xy;
	velocityForce += force * deltaTime;
	return velocityForce;
}


void fragment () {
	COLOR = vec4(vorticityForce(TEXTURE, UV, TEXTURE_PIXEL_SIZE), 0.0, 1.0);
}
"
