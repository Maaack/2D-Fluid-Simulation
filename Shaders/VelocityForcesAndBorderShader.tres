[gd_resource type="Shader" format=2]

[resource]
code = "/* 
This shader is under MIT license.
*/

shader_type canvas_item;

uniform float vorticityScale = 4.0;
uniform float borderScaleFactor = 1.0;
uniform float borderWidth = 1.0;
uniform bool borderActive = true;

bool isOnBorder (vec2 uv, vec2 texelSize) {
	vec2 borderSize = borderWidth * texelSize;
	return uv.x < borderSize.x || uv.x > 1.0 - borderSize.x || uv.y < borderSize.y || uv.y > 1.0 - borderSize.y;
}

vec2 borderAdjustment (vec2 uv, vec2 texelSize) {
	vec2 borderSize = borderWidth * texelSize;
	uv.x = uv.x < borderSize.x ? uv.x + (borderSize.x - uv.x) : uv.x;
	uv.x = uv.x > 1.0 - borderSize.x ? uv.x - (1.0 - borderSize.x - uv.x) : uv.x;
	uv.y = uv.y < borderSize.y ? uv.y + (borderSize.y - uv.y) : uv.y;
	uv.y = uv.y > 1.0 - borderSize.y ? uv.y - (1.0 - borderSize.y - uv.y) : uv.y;
	return uv;
}

vec4 borderScale(vec4 color, sampler2D sampler, vec2 uv, vec2 texelSize) {
	if (borderActive && isOnBorder(uv, texelSize)){
		uv = borderAdjustment(uv, texelSize);
		color = texture(sampler, uv);
		return vec4(color.rgb * borderScaleFactor, color.a);
	} else {
		return color;
	}
}

float curl (sampler2D velocity, vec2 uv, vec2 texelSize) {
	vec2 xOffset = vec2(texelSize.x, 0.0);
	vec2 yOffset = vec2(0.0, texelSize.y);
	
	float velocityTop = texture(velocity, uv + yOffset).x;
	float velocityBottom = texture(velocity, uv - yOffset).x;
	float velocityRight = texture(velocity, uv + xOffset).y;
	float velocityLeft = texture(velocity, uv - xOffset).y;
	return velocityTop - velocityBottom + velocityLeft - velocityRight;
}

vec4 vorticityPass(sampler2D velocity, vec2 uv, vec2 texelSize) {
	vec2 xOffset = vec2(texelSize.x, 0.0);
	vec2 yOffset = vec2(0.0, texelSize.y);
	
	float curlTop = curl(velocity, uv + yOffset, texelSize);
	float curlBottom = curl(velocity, uv - yOffset, texelSize);
	float curlRight = curl(velocity, uv + xOffset, texelSize);
	float curlLeft = curl(velocity, uv - xOffset, texelSize);
	float curlCenter = curl(velocity, uv, texelSize);
	
	vec2 force = vec2(abs(curlTop) - abs(curlBottom), abs(curlLeft) - abs(curlRight));
	force /= (length(force) + 1e-5);
 	force *= vorticityScale * curlCenter;
	vec2 velocityForce = texture(velocity, uv).xy;
	vec2 velocityFinal = velocityForce.xy + (velocityForce.xy * force);
	return vec4(velocityFinal, 0.0, 1.0);
}

void fragment()
{
	vec4 color = vorticityPass(TEXTURE, UV, TEXTURE_PIXEL_SIZE);
	COLOR = borderScale(color, TEXTURE, UV, TEXTURE_PIXEL_SIZE);
}
"
