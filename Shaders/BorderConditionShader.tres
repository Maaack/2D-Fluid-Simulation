[gd_resource type="Shader" format=2]

[resource]
code = "/* 
This shader is under MIT license.
*/

shader_type canvas_item;

uniform float scale;
uniform bool active = true;

bool isOnBorder (vec2 uv, vec2 texelSize) {
	return uv.x < texelSize.x || uv.x > 1.0 - texelSize.x || uv.y < texelSize.y || uv.y > 1.0 - texelSize.y;
}

vec2 borderAdjustment (vec2 uv, vec2 texelSize) {
	uv.x = uv.x < texelSize.x ? uv.x + texelSize.x : uv.x;
	uv.x = uv.x > 1.0 - texelSize.x ? uv.x - texelSize.x : uv.x;
	uv.y = uv.y < texelSize.y ? uv.y + texelSize.y : uv.y;
	uv.y = uv.y > 1.0 - texelSize.y ? uv.y - texelSize.y : uv.y;
	return uv;
}

vec4 borderScale (sampler2D sampler, vec2 uv, vec2 texelSize) {
	if (active && isOnBorder(uv, texelSize)){
		uv = borderAdjustment(uv, texelSize);
		vec4 color = texture(sampler, uv);
		return vec4(color.rgb * scale, 1.0);
	} else {
		return texture(sampler, uv);
	}
}

void fragment () {
	COLOR = borderScale(TEXTURE, UV, TEXTURE_PIXEL_SIZE);
}
"
